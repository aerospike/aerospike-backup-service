definitions:
  model.AerospikeCluster:
    description: AerospikeCluster represents the configuration for an Aerospike cluster
      for backup.
    properties:
      conn-timeout:
        description: The connection timeout in milliseconds.
        type: integer
      credentials:
        allOf:
        - $ref: '#/definitions/model.Credentials'
        description: The authentication details to the Aerospike cluster.
      label:
        description: The cluster name.
        type: string
      seed-nodes:
        description: The seed nodes details.
        items:
          $ref: '#/definitions/model.SeedNode'
        type: array
      tls:
        allOf:
        - $ref: '#/definitions/model.TLS'
        description: The cluster TLS configuration.
      use-services-alternate:
        description: Whether should use "services-alternate" instead of "services"
          in info request during cluster tending.
        type: boolean
    type: object
  model.BackupDetails:
    description: BackupDetails contains information about a backup.
    properties:
      byte-count:
        description: The size of the backup in bytes.
        type: integer
      created:
        description: The backup time in the ISO 8601 format.
        type: string
      file-count:
        description: The number of backup files created.
        type: integer
      from:
        description: The lower time bound of backup entities in the ISO 8601 format
          (for incremental backups).
        type: string
      key:
        description: The path to the backup files.
        type: string
      namespace:
        description: The namespace of a backup.
        type: string
      record-count:
        description: The total number of records backed up.
        type: integer
      secondary-index-count:
        description: The number of secondary indexes backed up.
        type: integer
      udf-count:
        description: The number of UDF files backed up.
        type: integer
    type: object
  model.BackupPolicy:
    description: BackupPolicy represents a scheduled backup policy.
    properties:
      bandwidth:
        description: |-
          Throttles backup write operations to the backup file(s) to not exceed the given
          bandwidth in MiB/s.
        type: integer
      file-limit:
        description: |-
          File size limit (in MB) for --directory. If an .asb backup file crosses this size threshold,
          a new backup file will be created.
        type: integer
      filter-exp:
        type: string
      max-records:
        description: An approximate limit for the number of records to process. Available
          in server 4.9 and above.
        type: integer
      max-retries:
        description: Maximum number of retries before aborting the current transaction.
        type: integer
      no-bins:
        description: Only backup record metadata (digest, TTL, generation count, key).
        type: boolean
      no-indexes:
        description: Do not back up any secondary index definitions.
        type: boolean
      no-records:
        description: Do not back up any record data (metadata or bin data).
        type: boolean
      no-udfs:
        description: Do not back up any UDF modules.
        type: boolean
      parallel:
        description: Maximum number of scan calls to run in parallel.
        type: integer
      records-per-second:
        description: |-
          Limit total returned records per second (RPS). If RPS is zero (the default),
          the records-per-second limit is not applied.
        type: integer
      remove-artifacts:
        description: Clear directory or remove output file.
        type: boolean
      remove-files:
        description: Whether to clear the output directory.
        type: boolean
      retry-delay:
        description: RetryDelay defines the delay in milliseconds before retrying
          a failed operation.
        type: integer
      socket-timeout:
        description: |-
          Socket timeout in milliseconds. If this value is 0, it is set to total-timeout.
          If both are 0, there is no socket idle time limit.
        type: integer
      total-timeout:
        description: Total socket timeout in milliseconds. Default is 0, that is,
          no timeout.
        type: integer
    type: object
  model.BackupRoutine:
    description: BackupRoutine represents a scheduled backup operation routine.
    properties:
      after-digest:
        type: string
      backup-policy:
        description: The name of the corresponding bakup policy.
        type: string
      bin-list:
        description: The list of backup bin names (optional, an empty list implies
          backing up all bins).
        items:
          type: string
        type: array
      incr-interval-cron:
        description: The interval for incremental backup as a cron expression string
          (optional).
        type: string
      interval-cron:
        description: The interval for full backup as a cron expression string.
        type: string
      namespaces:
        description: The list of the namespaces to back up (optional, empty list implies
          backup up whole cluster).
        items:
          type: string
        type: array
      node-list:
        description: The list of nodes in the Aerospike cluster to run the backup
          for.
        items:
          $ref: '#/definitions/model.Node'
        type: array
      partition-list:
        description: |-
          Back up list of partition filters. Partition filters can be ranges, individual partitions,
          or records after a specific digest within a single partition.
          Default number of partitions to back up: 0 to 4095: all partitions.
        type: string
      secret-agent:
        description: The Secret Agent configuration for the routine (optional).
        type: string
      set-list:
        description: The list of backup set names (optional, an empty list implies
          backing up all sets).
        items:
          type: string
        type: array
      source-cluster:
        description: The name of the corresponding source cluster.
        type: string
      storage:
        description: The name of the corresponding storage provider configuration.
        type: string
    type: object
  model.BackupServiceConfig:
    description: BackupServiceConfig represents the backup service configuration properties.
    properties:
      http:
        allOf:
        - $ref: '#/definitions/model.HTTPServerConfig'
        description: HTTPServer is the backup service HTTP server configuration.
      logger:
        allOf:
        - $ref: '#/definitions/model.LoggerConfig'
        description: Logger is the backup service logger configuration.
    type: object
  model.Config:
    description: Config represents the service configuration file.
    properties:
      aerospike-clusters:
        additionalProperties:
          $ref: '#/definitions/model.AerospikeCluster'
        type: object
      backup-policies:
        additionalProperties:
          $ref: '#/definitions/model.BackupPolicy'
        type: object
      backup-routines:
        additionalProperties:
          $ref: '#/definitions/model.BackupRoutine'
        type: object
      secret-agent:
        additionalProperties:
          $ref: '#/definitions/model.SecretAgent'
        type: object
      service:
        $ref: '#/definitions/model.BackupServiceConfig'
      storage:
        additionalProperties:
          $ref: '#/definitions/model.Storage'
        type: object
    type: object
  model.Credentials:
    description: Credentials represents authentication details to the Aerospike cluster.
    properties:
      auth-mode:
        description: The authentication mode string (INTERNAL, EXTERNAL, EXTERNAL_INSECURE,
          PKI).
        type: string
      password:
        description: The password for the cluster authentication.
        type: string
      password-path:
        description: The file path with the password string, will take precedence
          over the password field.
        type: string
      user:
        description: The username for the cluster authentication.
        type: string
    type: object
  model.HTTPServerConfig:
    description: HTTPServerConfig represents the service's HTTP server configuration.
    properties:
      address:
        default: 0.0.0.0
        type: string
      port:
        default: 8080
        type: integer
      rate:
        $ref: '#/definitions/model.RateLimiterConfig'
    type: object
  model.JobStatus:
    enum:
    - Running
    - Done
    - Failed
    type: string
    x-enum-varnames:
    - JobStatusRunning
    - JobStatusDone
    - JobStatusFailed
  model.LoggerConfig:
    description: LoggerConfig represents the backup service logger configuration.
    properties:
      format:
        default: PLAIN
        description: Format is the logger format (PLAIN, JSON).
        type: string
      level:
        default: DEBUG
        description: Level is the logger level.
        type: string
    type: object
  model.Node:
    description: Node represents the Aerospike node details.
    properties:
      ip:
        type: string
      port:
        type: integer
    type: object
  model.RateLimiterConfig:
    description: RateLimiterConfig is the HTTP server rate limiter configuration.
    properties:
      size:
        default: 1024
        type: integer
      tps:
        default: 1024
        type: integer
      white-list:
        items:
          type: string
        type: array
    type: object
  model.RestoreJobStatus:
    description: RestoreJobStatus represents a restore job status.
    properties:
      error: {}
      existed-records:
        type: integer
      expired-records:
        type: integer
      fresher-records:
        type: integer
      ignored-records:
        type: integer
      index-count:
        type: integer
      inserted-records:
        type: integer
      skipped-records:
        type: integer
      status:
        allOf:
        - $ref: '#/definitions/model.JobStatus'
        enum:
        - Running
        - Done
        - Failed
      total-bytes:
        type: integer
      total-records:
        type: integer
      udf-count:
        type: integer
    type: object
  model.RestoreNamespace:
    description: RestoreNamespace specifies an alternative namespace name for the
      restore operation.
    properties:
      destination:
        description: Destination namespace name.
        type: string
      source:
        description: Original namespace name.
        type: string
    type: object
  model.RestorePolicy:
    description: RestorePolicy represents a policy for the restore operation.
    properties:
      bandwidth:
        description: |-
          Throttles read operations from the backup file(s) to not exceed the given I/O bandwidth
          in MiB/s and its database write operations to not exceed the given number of transactions
          per second.
        type: integer
      batch-size:
        description: |-
          The max allowed number of records per an async batch write call.
          Default is 128 with batch writes enabled, or 16 without batch writes.
        type: integer
      bin-list:
        description: The bins to restore (optional, an empty list implies restoring
          all bins).
        items:
          type: string
        type: array
      disable-batch-writes:
        description: |-
          Disables the use of batch writes when restoring records to the Aerospike cluster.
          By default, the cluster is checked for batch write support.
        type: boolean
      max-async-batches:
        description: The max number of outstanding async record batch write calls
          at a time.
        type: integer
      namespace:
        allOf:
        - $ref: '#/definitions/model.RestoreNamespace'
        description: |-
          Namespace details for the restore operation.
          By default, the data is restored to the namespace from which it was taken.
      no-generation:
        description: |-
          Records from backups take precedence. This option disables the generation check.
          With this option, records from the backup always overwrite records that already exist in
          the namespace, regardless of generation numbers.
        type: boolean
      no-indexes:
        description: Do not restore any secondary index definitions.
        type: boolean
      no-records:
        description: |-
          Do not restore any record data (metadata or bin data).
          By default, record data, secondary index definitions, and UDF modules
          will be restored.
        type: boolean
      no-udfs:
        description: Do not restore any UDF modules.
        type: boolean
      parallel:
        description: The number of client threads to spawn for writing to the cluster.
        type: integer
      replace:
        description: |-
          Replace records. This controls how records from the backup overwrite existing records in
          the namespace. By default, restoring a record from a backup only replaces the bins
          contained in the backup; all other bins of an existing record remain untouched.
        type: boolean
      set-list:
        description: The sets to restore (optional, an empty list implies restoring
          all sets).
        items:
          type: string
        type: array
      timeout:
        description: Timeout (ms) for Aerospike commands to write records, create
          indexes and create UDFs.
        type: integer
      tps:
        description: |-
          Throttles read operations from the backup file(s) to not exceed the given I/O bandwidth
          in MiB/s and its database write operations to not exceed the given number of transactions
          per second.
        type: integer
      unique:
        description: |-
          Existing records take precedence. With this option, only records that do not exist in
          the namespace are restored, regardless of generation numbers. If a record exists in
          the namespace, the record from the backup is ignored.
        type: boolean
    type: object
  model.RestoreRequest:
    description: RestoreRequest represents a restore operation request.
    properties:
      destination:
        $ref: '#/definitions/model.AerospikeCluster'
      policy:
        $ref: '#/definitions/model.RestorePolicy'
      secret-agent:
        $ref: '#/definitions/model.SecretAgent'
      source:
        $ref: '#/definitions/model.Storage'
    type: object
  model.RestoreTimestampRequest:
    description: RestoreTimestampRequest represents a restore by timestamp operation
      request.
    properties:
      destination:
        $ref: '#/definitions/model.AerospikeCluster'
      policy:
        $ref: '#/definitions/model.RestorePolicy'
      routine:
        type: string
      secret-agent:
        $ref: '#/definitions/model.SecretAgent'
      time:
        format: int64
        type: integer
    type: object
  model.SecretAgent:
    description: SecretAgent represents the configuration of an Aerospike Secret Agent
      for a backup/restore operation.
    properties:
      address:
        description: Address of the Secret Agent.
        type: string
      port:
        description: Port the Secret Agent is running on.
        type: string
      timeout:
        description: Timeout in milliseconds.
        type: integer
      tls-ca:
        description: The path to a trusted CA certificate file in PEM format.
        type: string
      tls-enabled:
        description: Indicates whether TLS is enabled.
        type: boolean
    type: object
  model.SeedNode:
    description: SeedNode represents details of a node in the Aerospike cluster.
    properties:
      host-name:
        description: The host name of the node.
        type: string
      port:
        description: The port of the node.
        type: integer
      tls-name:
        description: TLS certificate name used for secure connections (if enabled).
        type: string
    type: object
  model.Storage:
    description: Storage represents the configuration for a backup storage details.
    properties:
      path:
        description: The root path for the backup repository.
        type: string
      s3-endpoint-override:
        description: An alternative endpoint for the S3 SDK to communicate (AWS S3
          optional).
        type: string
      s3-log-level:
        default: Fatal
        description: The log level of the AWS S3 SDK (AWS S3 optional).
        type: string
      s3-profile:
        description: The S3 profile name (AWS S3 optional).
        type: string
      s3-region:
        description: The S3 region string (AWS S3 optional).
        type: string
      type:
        allOf:
        - $ref: '#/definitions/model.StorageType'
        description: The type of the storage provider (0 - Local, 1 - AWS S3).
    type: object
  model.StorageType:
    description: StorageType represents the type of the backup storage.
    enum:
    - 0
    - 1
    type: integer
    x-enum-varnames:
    - Local
    - S3
  model.TLS:
    description: TLS represents the Aerospike cluster TLS configuration options.
    properties:
      cafile:
        description: Path to a trusted CA certificate file.
        type: string
      capath:
        description: Path to a directory of trusted CA certificates.
        type: string
      cert-blacklist:
        description: Path to a certificate blocklist file. The file should contain
          one line for each blocklisted certificate.
        type: string
      certfile:
        description: Path to the chain file for mutual authentication (if Aerospike
          Cluster supports it).
        type: string
      cipher-suite:
        description: TLS cipher selection criteria. The format is the same as OpenSSL's
          Cipher List Format.
        type: string
      keyfile:
        description: Path to the key for mutual authentication (if Aerospike cluster
          supports it).
        type: string
      keyfile-password:
        description: Password to load protected TLS-keyfile (env:VAR, file:PATH, PASSWORD).
        type: string
      name:
        description: The default TLS name used to authenticate each TLS socket connection.
        type: string
      protocols:
        description: TLS protocol selection criteria. This format is the same as Apache's
          SSL Protocol.
        type: string
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
host: localhost:8080
info:
  contact: {}
  description: Aerospike Backup Service
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Backup Service REST API Specification
  version: 0.1.0
paths:
  /:
    get:
      operationId: root
      responses:
        "200":
          description: OK
      summary: Root endpoint.
      tags:
      - System
  /api-docs/:
    get:
      operationId: api-docs
      responses:
        "200":
          description: OK
      summary: OpenAPI specification endpoint.
      tags:
      - System
  /backup/full/list:
    get:
      operationId: getAvailableFullBackups
      parameters:
      - description: Backup routine name
        in: query
        name: name
        type: string
      - description: Lower bound timestamp filter
        format: int64
        in: query
        name: from
        type: integer
      - description: Upper bound timestamp filter
        format: int64
        in: query
        name: to
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Full backups by routine
          schema:
            additionalProperties:
              items:
                $ref: '#/definitions/model.BackupDetails'
              type: array
            type: object
        "404":
          description: Not Found
          schema:
            type: string
      summary: Get available full backups.
      tags:
      - Backup
  /backup/incremental/list:
    get:
      operationId: getAvailableIncrementalBackups
      parameters:
      - description: Backup routine name
        in: query
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Incremental backups by routine
          schema:
            additionalProperties:
              items:
                $ref: '#/definitions/model.BackupDetails'
              type: array
            type: object
        "404":
          description: Not Found
          schema:
            type: string
      summary: Get available incremental backups.
      tags:
      - Backup
  /backup/schedule:
    post:
      operationId: scheduleFullBackup
      parameters:
      - description: Backup routine name
        in: query
        name: name
        required: true
        type: string
      - description: Delay interval in milliseconds
        in: query
        name: delay
        type: integer
      responses:
        "202":
          description: Accepted
        "404":
          description: Not Found
          schema:
            type: string
      summary: Schedule a full backup once per routine name.
      tags:
      - Backup
  /config:
    get:
      operationId: readConfig
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Config'
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Returns the configuration for the service.
      tags:
      - Configuration
    put:
      consumes:
      - application/json
      operationId: updateConfig
      parameters:
      - description: config
        in: body
        name: config
        required: true
        schema:
          $ref: '#/definitions/model.Config'
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Updates the configuration for the service.
      tags:
      - Configuration
  /config/cluster:
    delete:
      operationId: deleteCluster
      parameters:
      - description: cluster Name
        in: query
        name: name
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Deletes a cluster from the configuration by name.
      tags:
      - Configuration
    get:
      operationId: readClusters
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              $ref: '#/definitions/model.AerospikeCluster'
            type: object
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Reads all Aerospike clusters from the configuration.
      tags:
      - Configuration
    post:
      consumes:
      - application/json
      operationId: addCluster
      parameters:
      - description: cluster name
        in: query
        name: name
        required: true
        type: string
      - description: cluster info
        in: body
        name: cluster
        required: true
        schema:
          $ref: '#/definitions/model.AerospikeCluster'
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Adds an Aerospike cluster to the config.
      tags:
      - Configuration
    put:
      consumes:
      - application/json
      operationId: updateCluster
      parameters:
      - description: cluster name
        in: query
        name: name
        required: true
        type: string
      - description: aerospike cluster
        in: body
        name: cluster
        required: true
        schema:
          $ref: '#/definitions/model.AerospikeCluster'
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Updates an existing Aerospike cluster in the configuration.
      tags:
      - Configuration
  /config/policy:
    delete:
      operationId: deletePolicy
      parameters:
      - description: Policy Name
        in: query
        name: name
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Deletes a policy from the configuration by name.
      tags:
      - Configuration
    get:
      operationId: readPolicies
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              $ref: '#/definitions/model.BackupPolicy'
            type: object
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Reads all policies from the configuration.
      tags:
      - Configuration
    post:
      consumes:
      - application/json
      operationId: addPolicy
      parameters:
      - description: policy name
        in: query
        name: name
        required: true
        type: string
      - description: backup policy
        in: body
        name: storage
        required: true
        schema:
          $ref: '#/definitions/model.BackupPolicy'
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Adds a policy to the config.
      tags:
      - Configuration
    put:
      consumes:
      - application/json
      operationId: updatePolicy
      parameters:
      - description: policy name
        in: query
        name: name
        required: true
        type: string
      - description: backup policy
        in: body
        name: storage
        required: true
        schema:
          $ref: '#/definitions/model.BackupPolicy'
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Updates an existing policy in the configuration.
      tags:
      - Configuration
  /config/routine:
    delete:
      operationId: deleteRoutine
      parameters:
      - description: routine name
        in: query
        name: name
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Deletes a backup routine from the configuration by name.
      tags:
      - Configuration
    get:
      operationId: readRoutines
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              $ref: '#/definitions/model.BackupRoutine'
            type: object
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Reads all routines from the configuration.
      tags:
      - Configuration
    post:
      consumes:
      - application/json
      operationId: addRoutine
      parameters:
      - description: routine name
        in: query
        name: name
        required: true
        type: string
      - description: backup routine
        in: body
        name: storage
        required: true
        schema:
          $ref: '#/definitions/model.BackupRoutine'
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Adds a backup routine to the config.
      tags:
      - Configuration
    put:
      consumes:
      - application/json
      operationId: updateRoutine
      parameters:
      - description: routine name
        in: query
        name: name
        required: true
        type: string
      - description: backup routine
        in: body
        name: storage
        required: true
        schema:
          $ref: '#/definitions/model.BackupRoutine'
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Updates an existing routine in the configuration.
      tags:
      - Configuration
  /config/storage:
    delete:
      operationId: deleteStorage
      parameters:
      - description: storage name
        in: query
        name: name
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Deletes a storage from the configuration by name.
      tags:
      - Configuration
    get:
      operationId: readStorage
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              $ref: '#/definitions/model.Storage'
            type: object
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Reads all storage from the configuration.
      tags:
      - Configuration
    post:
      consumes:
      - application/json
      operationId: addStorage
      parameters:
      - description: storage name
        in: query
        name: name
        required: true
        type: string
      - description: backup storage
        in: body
        name: storage
        required: true
        schema:
          $ref: '#/definitions/model.Storage'
      responses:
        "201":
          description: Created
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Adds a storage cluster to the config.
      tags:
      - Configuration
    put:
      consumes:
      - application/json
      operationId: updateStorage
      parameters:
      - description: storage name
        in: query
        name: name
        required: true
        type: string
      - description: backup storage
        in: body
        name: storage
        required: true
        schema:
          $ref: '#/definitions/model.Storage'
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Updates an existing storage in the configuration.
      tags:
      - Configuration
  /health:
    get:
      operationId: health
      responses:
        "200":
          description: OK
      summary: Health endpoint.
      tags:
      - System
  /metrics:
    get:
      operationId: metrics
      responses:
        "200":
          description: OK
      summary: Prometheus metrics endpoint.
      tags:
      - System
  /ready:
    get:
      operationId: ready
      responses:
        "200":
          description: OK
      summary: Readiness endpoint.
      tags:
      - System
  /restore/full:
    post:
      consumes:
      - application/json
      description: Specify the directory parameter for the full backup restore.
      operationId: restoreFull
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.RestoreRequest'
      responses:
        "202":
          description: Job ID
          schema:
            type: integer
            format: int64
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Trigger an asynchronous full restore operation.
      tags:
      - Restore
  /restore/incremental:
    post:
      consumes:
      - application/json
      description: Specify the file parameter to restore from an incremental backup
        file.
      operationId: restoreIncremental
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.RestoreRequest'
      responses:
        "202":
          description: Job ID
          schema:
            type: integer
            format: int64
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Trigger an asynchronous incremental restore operation.
      tags:
      - Restore
  /restore/status:
    get:
      operationId: restoreStatus
      parameters:
      - description: Job ID to retrieve the status
        format: int64
        in: query
        name: jobId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Job status
          schema:
            $ref: '#/definitions/model.RestoreJobStatus'
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Retrieve status for a restore job.
      tags:
      - Restore
  /restore/timestamp:
    post:
      consumes:
      - application/json
      description: Restores backup from given point in time
      operationId: restoreTimestamp
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/model.RestoreTimestampRequest'
      responses:
        "202":
          description: Job ID
          schema:
            type: integer
            format: int64
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Trigger an asynchronous restore operation to specific point in time.
      tags:
      - Restore
  /version:
    get:
      operationId: version
      responses:
        "200":
          description: version
          schema:
            type: string
      summary: Returns application version.
      tags:
      - System
swagger: "2.0"
