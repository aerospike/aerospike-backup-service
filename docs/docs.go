// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/": {
            "get": {
                "tags": [
                    "System"
                ],
                "summary": "Root endpoint.",
                "operationId": "root",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/api-docs/": {
            "get": {
                "tags": [
                    "System"
                ],
                "summary": "OpenAPI specification endpoint.",
                "operationId": "api-docs",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/backup/full/list": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Backup"
                ],
                "summary": "Get available full backups.",
                "operationId": "getAvailableFullBackups",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Backup routine name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int64",
                        "description": "Lower bound timestamp filter",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int64",
                        "description": "Upper bound timestamp filter",
                        "name": "to",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Full backups by routine",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/model.BackupDetails"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/backup/incremental/list": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Backup"
                ],
                "summary": "Get available incremental backups.",
                "operationId": "getAvailableIncrementalBackups",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Backup routine name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int64",
                        "description": "Lower bound timestamp filter",
                        "name": "from",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "format": "int64",
                        "description": "Upper bound timestamp filter",
                        "name": "to",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Incremental backups by routine",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/model.BackupDetails"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/backup/schedule": {
            "post": {
                "tags": [
                    "Backup"
                ],
                "summary": "Schedule a full backup once per routine name.",
                "operationId": "scheduleFullBackup",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Backup routine name",
                        "name": "name",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Delay interval in milliseconds",
                        "name": "delay",
                        "in": "query"
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted"
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/config": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Configuration"
                ],
                "summary": "Returns the configuration for the service.",
                "operationId": "readConfig",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Config"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Configuration"
                ],
                "summary": "Updates the configuration for the service.",
                "operationId": "updateConfig",
                "parameters": [
                    {
                        "description": "config",
                        "name": "config",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Config"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/config/clusters": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Configuration"
                ],
                "summary": "Reads all Aerospike clusters from the configuration.",
                "operationId": "readAllClusters",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "$ref": "#/definitions/model.AerospikeCluster"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/config/clusters/{name}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Configuration"
                ],
                "summary": "Reads an Aerospike cluster from the configuration given its name.",
                "operationId": "readCluster",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the Aerospike cluster",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.AerospikeCluster"
                        }
                    },
                    "404": {
                        "description": "The specified cluster could not be found.",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Configuration"
                ],
                "summary": "Updates an existing Aerospike cluster in the configuration.",
                "operationId": "updateCluster",
                "parameters": [
                    {
                        "type": "string",
                        "description": "cluster name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "aerospike cluster",
                        "name": "cluster",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.AerospikeCluster"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Configuration"
                ],
                "summary": "Adds an Aerospike cluster to the config.",
                "operationId": "addCluster",
                "parameters": [
                    {
                        "type": "string",
                        "description": "cluster name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "cluster info",
                        "name": "cluster",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.AerospikeCluster"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Configuration"
                ],
                "summary": "Deletes a cluster from the configuration by name.",
                "operationId": "deleteCluster",
                "parameters": [
                    {
                        "type": "string",
                        "description": "cluster Name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/config/policies": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Configuration"
                ],
                "summary": "Updates an existing policy in the configuration.",
                "operationId": "updatePolicy",
                "parameters": [
                    {
                        "type": "string",
                        "description": "policy name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "backup policy",
                        "name": "storage",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.BackupPolicy"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Configuration"
                ],
                "summary": "Deletes a policy from the configuration by name.",
                "operationId": "deletePolicy",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Policy Name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/config/policies/{name}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Configuration"
                ],
                "summary": "Reads a backup policy from the configuration given its name.",
                "operationId": "readPolicy",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the backup policy",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.BackupPolicy"
                        }
                    },
                    "404": {
                        "description": "The specified policy could not be found.",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Configuration"
                ],
                "summary": "Adds a policy to the config.",
                "operationId": "addPolicy",
                "parameters": [
                    {
                        "type": "string",
                        "description": "policy name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "backup policy",
                        "name": "storage",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.BackupPolicy"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/config/routines": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Configuration"
                ],
                "summary": "Reads all routines from the configuration.",
                "operationId": "readRoutines",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "$ref": "#/definitions/model.BackupRoutine"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/config/routines/{name}": {
            "put": {
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Configuration"
                ],
                "summary": "Updates an existing routine in the configuration.",
                "operationId": "updateRoutine",
                "parameters": [
                    {
                        "type": "string",
                        "description": "routine name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "backup routine",
                        "name": "storage",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.BackupRoutine"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Configuration"
                ],
                "summary": "Adds a backup routine to the config.",
                "operationId": "addRoutine",
                "parameters": [
                    {
                        "type": "string",
                        "description": "routine name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "backup routine",
                        "name": "storage",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.BackupRoutine"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Configuration"
                ],
                "summary": "Deletes a backup routine from the configuration by name.",
                "operationId": "deleteRoutine",
                "parameters": [
                    {
                        "type": "string",
                        "description": "routine name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/config/storage": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Configuration"
                ],
                "summary": "Reads all storage from the configuration.",
                "operationId": "readAllStorage",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "$ref": "#/definitions/model.Storage"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/config/storage/{name}": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Configuration"
                ],
                "summary": "Reads a specific storage from the configuration given its name.",
                "operationId": "readStorage",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Name of the storage",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    },
                    "404": {
                        "description": "The specified storage could not be found.",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Configuration"
                ],
                "summary": "Updates an existing storage in the configuration.",
                "operationId": "updateStorage",
                "parameters": [
                    {
                        "type": "string",
                        "description": "storage name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "backup storage",
                        "name": "storage",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Configuration"
                ],
                "summary": "Adds a storage to the config.",
                "operationId": "addStorage",
                "parameters": [
                    {
                        "type": "string",
                        "description": "storage name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "backup storage",
                        "name": "storage",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Storage"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Configuration"
                ],
                "summary": "Deletes a storage from the configuration by name.",
                "operationId": "deleteStorage",
                "parameters": [
                    {
                        "type": "string",
                        "description": "storage name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/health": {
            "get": {
                "tags": [
                    "System"
                ],
                "summary": "Health endpoint.",
                "operationId": "health",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/metrics": {
            "get": {
                "tags": [
                    "System"
                ],
                "summary": "Prometheus metrics endpoint.",
                "operationId": "metrics",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/ready": {
            "get": {
                "tags": [
                    "System"
                ],
                "summary": "Readiness endpoint.",
                "operationId": "ready",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/restore/full": {
            "post": {
                "description": "Specify the directory parameter for the full backup restore.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Restore"
                ],
                "summary": "Trigger an asynchronous full restore operation.",
                "operationId": "restoreFull",
                "parameters": [
                    {
                        "description": "query params",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.RestoreRequest"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Job ID",
                        "schema": {
                            "type": "int64"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/restore/incremental": {
            "post": {
                "description": "Specify the file parameter to restore from an incremental backup file.",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Restore"
                ],
                "summary": "Trigger an asynchronous incremental restore operation.",
                "operationId": "restoreIncremental",
                "parameters": [
                    {
                        "description": "query params",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.RestoreRequest"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Job ID",
                        "schema": {
                            "type": "int64"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/restore/status": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Restore"
                ],
                "summary": "Retrieve status for a restore job.",
                "operationId": "restoreStatus",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "int64",
                        "description": "Job ID to retrieve the status",
                        "name": "jobId",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Job status",
                        "schema": {
                            "$ref": "#/definitions/model.RestoreJobStatus"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/restore/timestamp": {
            "post": {
                "description": "Restores backup from given point in time",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Restore"
                ],
                "summary": "Trigger an asynchronous restore operation to specific point in time.",
                "operationId": "restoreTimestamp",
                "parameters": [
                    {
                        "description": "query params",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.RestoreTimestampRequest"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Job ID",
                        "schema": {
                            "type": "int64"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/version": {
            "get": {
                "tags": [
                    "System"
                ],
                "summary": "Returns application version.",
                "operationId": "version",
                "responses": {
                    "200": {
                        "description": "version",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "model.AerospikeCluster": {
            "description": "AerospikeCluster represents the configuration for an Aerospike cluster for backup.",
            "type": "object",
            "properties": {
                "conn-timeout": {
                    "description": "The connection timeout in milliseconds.",
                    "type": "integer"
                },
                "credentials": {
                    "description": "The authentication details to the Aerospike cluster.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.Credentials"
                        }
                    ]
                },
                "label": {
                    "description": "The cluster name.",
                    "type": "string"
                },
                "seed-nodes": {
                    "description": "The seed nodes details.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.SeedNode"
                    }
                },
                "tls": {
                    "description": "The cluster TLS configuration.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.TLS"
                        }
                    ]
                },
                "use-services-alternate": {
                    "description": "Whether should use \"services-alternate\" instead of \"services\" in info request during cluster tending.",
                    "type": "boolean"
                }
            }
        },
        "model.BackupDetails": {
            "description": "BackupDetails contains information about a backup.",
            "type": "object",
            "properties": {
                "byte-count": {
                    "description": "The size of the backup in bytes.",
                    "type": "integer"
                },
                "created": {
                    "description": "The backup time in the ISO 8601 format.",
                    "type": "string"
                },
                "file-count": {
                    "description": "The number of backup files created.",
                    "type": "integer"
                },
                "from": {
                    "description": "The lower time bound of backup entities in the ISO 8601 format (for incremental backups).",
                    "type": "string"
                },
                "key": {
                    "description": "The path to the backup files.",
                    "type": "string"
                },
                "namespace": {
                    "description": "The namespace of a backup.",
                    "type": "string"
                },
                "record-count": {
                    "description": "The total number of records backed up.",
                    "type": "integer"
                },
                "secondary-index-count": {
                    "description": "The number of secondary indexes backed up.",
                    "type": "integer"
                },
                "udf-count": {
                    "description": "The number of UDF files backed up.",
                    "type": "integer"
                }
            }
        },
        "model.BackupPolicy": {
            "description": "BackupPolicy represents a scheduled backup policy.",
            "type": "object",
            "properties": {
                "bandwidth": {
                    "description": "Throttles backup write operations to the backup file(s) to not exceed the given\nbandwidth in MiB/s.",
                    "type": "integer"
                },
                "file-limit": {
                    "description": "File size limit (in MB) for --directory. If an .asb backup file crosses this size threshold,\na new backup file will be created.",
                    "type": "integer"
                },
                "filter-exp": {
                    "type": "string"
                },
                "max-records": {
                    "description": "An approximate limit for the number of records to process. Available in server 4.9 and above.",
                    "type": "integer"
                },
                "max-retries": {
                    "description": "Maximum number of retries before aborting the current transaction.",
                    "type": "integer"
                },
                "no-bins": {
                    "description": "Only backup record metadata (digest, TTL, generation count, key).",
                    "type": "boolean"
                },
                "no-indexes": {
                    "description": "Do not back up any secondary index definitions.",
                    "type": "boolean"
                },
                "no-records": {
                    "description": "Do not back up any record data (metadata or bin data).",
                    "type": "boolean"
                },
                "no-udfs": {
                    "description": "Do not back up any UDF modules.",
                    "type": "boolean"
                },
                "parallel": {
                    "description": "Maximum number of scan calls to run in parallel.",
                    "type": "integer"
                },
                "records-per-second": {
                    "description": "Limit total returned records per second (RPS). If RPS is zero (the default),\nthe records-per-second limit is not applied.",
                    "type": "integer"
                },
                "remove-artifacts": {
                    "description": "Clear directory or remove output file.",
                    "type": "boolean"
                },
                "remove-files": {
                    "description": "Whether to clear the output directory (default: KeepAll).",
                    "enum": [
                        "KeepAll",
                        "RemoveAll",
                        "RemoveIncremental"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.RemoveFilesType"
                        }
                    ]
                },
                "retry-delay": {
                    "description": "RetryDelay defines the delay in milliseconds before retrying a failed operation.",
                    "type": "integer"
                },
                "socket-timeout": {
                    "description": "Socket timeout in milliseconds. If this value is 0, it is set to total-timeout.\nIf both are 0, there is no socket idle time limit.",
                    "type": "integer"
                },
                "total-timeout": {
                    "description": "Total socket timeout in milliseconds. Default is 0, that is, no timeout.",
                    "type": "integer"
                }
            }
        },
        "model.BackupRoutine": {
            "description": "BackupRoutine represents a scheduled backup operation routine.",
            "type": "object",
            "properties": {
                "after-digest": {
                    "type": "string"
                },
                "backup-policy": {
                    "description": "The name of the corresponding bakup policy.",
                    "type": "string"
                },
                "bin-list": {
                    "description": "The list of backup bin names (optional, an empty list implies backing up all bins).",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "incr-interval-cron": {
                    "description": "The interval for incremental backup as a cron expression string (optional).",
                    "type": "string"
                },
                "interval-cron": {
                    "description": "The interval for full backup as a cron expression string.",
                    "type": "string"
                },
                "namespaces": {
                    "description": "The list of the namespaces to back up (optional, empty list implies backup up whole cluster).",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "node-list": {
                    "description": "The list of nodes in the Aerospike cluster to run the backup for.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Node"
                    }
                },
                "partition-list": {
                    "description": "Back up list of partition filters. Partition filters can be ranges, individual partitions,\nor records after a specific digest within a single partition.\nDefault number of partitions to back up: 0 to 4095: all partitions.",
                    "type": "string"
                },
                "prefer-racks": {
                    "description": "A list of Aerospike Server rack IDs to prefer when reading records for a backup.",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "secret-agent": {
                    "description": "The Secret Agent configuration for the routine (optional).",
                    "type": "string"
                },
                "set-list": {
                    "description": "The list of backup set names (optional, an empty list implies backing up all sets).",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "source-cluster": {
                    "description": "The name of the corresponding source cluster.",
                    "type": "string"
                },
                "storage": {
                    "description": "The name of the corresponding storage provider configuration.",
                    "type": "string"
                }
            }
        },
        "model.BackupServiceConfig": {
            "description": "BackupServiceConfig represents the backup service configuration properties.",
            "type": "object",
            "properties": {
                "http": {
                    "description": "HTTPServer is the backup service HTTP server configuration.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.HTTPServerConfig"
                        }
                    ]
                },
                "logger": {
                    "description": "Logger is the backup service logger configuration.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.LoggerConfig"
                        }
                    ]
                }
            }
        },
        "model.Config": {
            "description": "Config represents the service configuration file.",
            "type": "object",
            "properties": {
                "aerospike-clusters": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/model.AerospikeCluster"
                    }
                },
                "backup-policies": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/model.BackupPolicy"
                    }
                },
                "backup-routines": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/model.BackupRoutine"
                    }
                },
                "secret-agent": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/model.SecretAgent"
                    }
                },
                "service": {
                    "$ref": "#/definitions/model.BackupServiceConfig"
                },
                "storage": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/model.Storage"
                    }
                }
            }
        },
        "model.Credentials": {
            "description": "Credentials represents authentication details to the Aerospike cluster.",
            "type": "object",
            "properties": {
                "auth-mode": {
                    "description": "The authentication mode string (INTERNAL, EXTERNAL, EXTERNAL_INSECURE, PKI).",
                    "type": "string"
                },
                "password": {
                    "description": "The password for the cluster authentication.",
                    "type": "string"
                },
                "password-path": {
                    "description": "The file path with the password string, will take precedence over the password field.",
                    "type": "string"
                },
                "user": {
                    "description": "The username for the cluster authentication.",
                    "type": "string"
                }
            }
        },
        "model.HTTPServerConfig": {
            "description": "HTTPServerConfig represents the service's HTTP server configuration.",
            "type": "object",
            "properties": {
                "address": {
                    "type": "string",
                    "default": "0.0.0.0"
                },
                "port": {
                    "type": "integer",
                    "default": 8080
                },
                "rate": {
                    "$ref": "#/definitions/model.RateLimiterConfig"
                }
            }
        },
        "model.JobStatus": {
            "type": "string",
            "enum": [
                "Running",
                "Done",
                "Failed"
            ],
            "x-enum-varnames": [
                "JobStatusRunning",
                "JobStatusDone",
                "JobStatusFailed"
            ]
        },
        "model.LoggerConfig": {
            "description": "LoggerConfig represents the backup service logger configuration.",
            "type": "object",
            "properties": {
                "format": {
                    "description": "Format is the logger format (PLAIN, JSON).",
                    "type": "string",
                    "default": "PLAIN"
                },
                "level": {
                    "description": "Level is the logger level.",
                    "type": "string",
                    "default": "DEBUG"
                }
            }
        },
        "model.Node": {
            "description": "Node represents the Aerospike node details.",
            "type": "object",
            "properties": {
                "ip": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                }
            }
        },
        "model.RateLimiterConfig": {
            "description": "RateLimiterConfig is the HTTP server rate limiter configuration.",
            "type": "object",
            "properties": {
                "size": {
                    "type": "integer",
                    "default": 1024
                },
                "tps": {
                    "type": "integer",
                    "default": 1024
                },
                "white-list": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "model.RemoveFilesType": {
            "description": "RemoveFilesType represents the type of the backup storage.",
            "type": "string",
            "enum": [
                "KeepAll",
                "RemoveAll",
                "RemoveIncremental"
            ],
            "x-enum-varnames": [
                "KeepAll",
                "RemoveAll",
                "RemoveIncremental"
            ]
        },
        "model.RestoreJobStatus": {
            "description": "RestoreJobStatus represents a restore job status.",
            "type": "object",
            "properties": {
                "error": {},
                "existed-records": {
                    "type": "integer"
                },
                "expired-records": {
                    "type": "integer"
                },
                "fresher-records": {
                    "type": "integer"
                },
                "ignored-records": {
                    "type": "integer"
                },
                "index-count": {
                    "type": "integer"
                },
                "inserted-records": {
                    "type": "integer"
                },
                "skipped-records": {
                    "type": "integer"
                },
                "status": {
                    "enum": [
                        "Running",
                        "Done",
                        "Failed"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.JobStatus"
                        }
                    ]
                },
                "total-bytes": {
                    "type": "integer"
                },
                "total-records": {
                    "type": "integer"
                },
                "udf-count": {
                    "type": "integer"
                }
            }
        },
        "model.RestoreNamespace": {
            "description": "RestoreNamespace specifies an alternative namespace name for the restore operation.",
            "type": "object",
            "properties": {
                "destination": {
                    "description": "Destination namespace name.",
                    "type": "string"
                },
                "source": {
                    "description": "Original namespace name.",
                    "type": "string"
                }
            }
        },
        "model.RestorePolicy": {
            "description": "RestorePolicy represents a policy for the restore operation.",
            "type": "object",
            "properties": {
                "bandwidth": {
                    "description": "Throttles read operations from the backup file(s) to not exceed the given I/O bandwidth\nin MiB/s and its database write operations to not exceed the given number of transactions\nper second.",
                    "type": "integer"
                },
                "batch-size": {
                    "description": "The max allowed number of records per an async batch write call.\nDefault is 128 with batch writes enabled, or 16 without batch writes.",
                    "type": "integer"
                },
                "bin-list": {
                    "description": "The bins to restore (optional, an empty list implies restoring all bins).",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "disable-batch-writes": {
                    "description": "Disables the use of batch writes when restoring records to the Aerospike cluster.\nBy default, the cluster is checked for batch write support.",
                    "type": "boolean"
                },
                "max-async-batches": {
                    "description": "The max number of outstanding async record batch write calls at a time.",
                    "type": "integer"
                },
                "namespace": {
                    "description": "Namespace details for the restore operation.\nBy default, the data is restored to the namespace from which it was taken.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.RestoreNamespace"
                        }
                    ]
                },
                "no-generation": {
                    "description": "Records from backups take precedence. This option disables the generation check.\nWith this option, records from the backup always overwrite records that already exist in\nthe namespace, regardless of generation numbers.",
                    "type": "boolean"
                },
                "no-indexes": {
                    "description": "Do not restore any secondary index definitions.",
                    "type": "boolean"
                },
                "no-records": {
                    "description": "Do not restore any record data (metadata or bin data).\nBy default, record data, secondary index definitions, and UDF modules\nwill be restored.",
                    "type": "boolean"
                },
                "no-udfs": {
                    "description": "Do not restore any UDF modules.",
                    "type": "boolean"
                },
                "parallel": {
                    "description": "The number of client threads to spawn for writing to the cluster.",
                    "type": "integer"
                },
                "replace": {
                    "description": "Replace records. This controls how records from the backup overwrite existing records in\nthe namespace. By default, restoring a record from a backup only replaces the bins\ncontained in the backup; all other bins of an existing record remain untouched.",
                    "type": "boolean"
                },
                "set-list": {
                    "description": "The sets to restore (optional, an empty list implies restoring all sets).",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "timeout": {
                    "description": "Timeout (ms) for Aerospike commands to write records, create indexes and create UDFs.",
                    "type": "integer"
                },
                "tps": {
                    "description": "Throttles read operations from the backup file(s) to not exceed the given I/O bandwidth\nin MiB/s and its database write operations to not exceed the given number of transactions\nper second.",
                    "type": "integer"
                },
                "unique": {
                    "description": "Existing records take precedence. With this option, only records that do not exist in\nthe namespace are restored, regardless of generation numbers. If a record exists in\nthe namespace, the record from the backup is ignored.",
                    "type": "boolean"
                }
            }
        },
        "model.RestoreRequest": {
            "description": "RestoreRequest represents a restore operation request.",
            "type": "object",
            "properties": {
                "destination": {
                    "$ref": "#/definitions/model.AerospikeCluster"
                },
                "policy": {
                    "$ref": "#/definitions/model.RestorePolicy"
                },
                "secret-agent": {
                    "$ref": "#/definitions/model.SecretAgent"
                },
                "source": {
                    "$ref": "#/definitions/model.Storage"
                }
            }
        },
        "model.RestoreTimestampRequest": {
            "description": "RestoreTimestampRequest represents a restore by timestamp operation request.",
            "type": "object",
            "properties": {
                "destination": {
                    "description": "The details of the Aerospike destination cluster.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.AerospikeCluster"
                        }
                    ]
                },
                "policy": {
                    "description": "Restore policy to use in the operation.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.RestorePolicy"
                        }
                    ]
                },
                "routine": {
                    "description": "The backup routine name.",
                    "type": "string"
                },
                "secret-agent": {
                    "description": "Secret Agent configuration (optional).",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.SecretAgent"
                        }
                    ]
                },
                "time": {
                    "description": "Required epoch time for recovery. The closest backup before the timestamp will be applied.",
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "model.SecretAgent": {
            "description": "SecretAgent represents the configuration of an Aerospike Secret Agent for a backup/restore operation.",
            "type": "object",
            "properties": {
                "address": {
                    "description": "Address of the Secret Agent.",
                    "type": "string"
                },
                "port": {
                    "description": "Port the Secret Agent is running on.",
                    "type": "string"
                },
                "timeout": {
                    "description": "Timeout in milliseconds.",
                    "type": "integer"
                },
                "tls-ca": {
                    "description": "The path to a trusted CA certificate file in PEM format.",
                    "type": "string"
                },
                "tls-enabled": {
                    "description": "Indicates whether TLS is enabled.",
                    "type": "boolean"
                }
            }
        },
        "model.SeedNode": {
            "description": "SeedNode represents details of a node in the Aerospike cluster.",
            "type": "object",
            "properties": {
                "host-name": {
                    "description": "The host name of the node.",
                    "type": "string"
                },
                "port": {
                    "description": "The port of the node.",
                    "type": "integer"
                },
                "tls-name": {
                    "description": "TLS certificate name used for secure connections (if enabled).",
                    "type": "string"
                }
            }
        },
        "model.Storage": {
            "description": "Storage represents the configuration for a backup storage details.",
            "type": "object",
            "properties": {
                "path": {
                    "description": "The root path for the backup repository.",
                    "type": "string"
                },
                "s3-endpoint-override": {
                    "description": "An alternative endpoint for the S3 SDK to communicate (AWS S3 optional).",
                    "type": "string"
                },
                "s3-log-level": {
                    "description": "The log level of the AWS S3 SDK (AWS S3 optional).",
                    "type": "string",
                    "default": "Fatal"
                },
                "s3-profile": {
                    "description": "The S3 profile name (AWS S3 optional).",
                    "type": "string"
                },
                "s3-region": {
                    "description": "The S3 region string (AWS S3 optional).",
                    "type": "string"
                },
                "type": {
                    "description": "The type of the storage provider (0 - Local, 1 - AWS S3).",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.StorageType"
                        }
                    ]
                }
            }
        },
        "model.StorageType": {
            "description": "StorageType represents the type of the backup storage.",
            "type": "integer",
            "enum": [
                0,
                1
            ],
            "x-enum-varnames": [
                "Local",
                "S3"
            ]
        },
        "model.TLS": {
            "description": "TLS represents the Aerospike cluster TLS configuration options.",
            "type": "object",
            "properties": {
                "cafile": {
                    "description": "Path to a trusted CA certificate file.",
                    "type": "string"
                },
                "capath": {
                    "description": "Path to a directory of trusted CA certificates.",
                    "type": "string"
                },
                "cert-blacklist": {
                    "description": "Path to a certificate blocklist file. The file should contain one line for each blocklisted certificate.",
                    "type": "string"
                },
                "certfile": {
                    "description": "Path to the chain file for mutual authentication (if Aerospike Cluster supports it).",
                    "type": "string"
                },
                "cipher-suite": {
                    "description": "TLS cipher selection criteria. The format is the same as OpenSSL's Cipher List Format.",
                    "type": "string"
                },
                "keyfile": {
                    "description": "Path to the key for mutual authentication (if Aerospike cluster supports it).",
                    "type": "string"
                },
                "keyfile-password": {
                    "description": "Password to load protected TLS-keyfile (env:VAR, file:PATH, PASSWORD).",
                    "type": "string"
                },
                "name": {
                    "description": "The default TLS name used to authenticate each TLS socket connection.",
                    "type": "string"
                },
                "protocols": {
                    "description": "TLS protocol selection criteria. This format is the same as Apache's SSL Protocol.",
                    "type": "string"
                }
            }
        }
    },
    "externalDocs": {
        "description": "OpenAPI",
        "url": "https://swagger.io/resources/open-api/"
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "0.1.0",
	Host:             "localhost:8080",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "Backup Service REST API Specification",
	Description:      "Aerospike Backup Service",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
